generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model userLimit {
  id        String   @id @default(cuid()) @map("_id")
  userId    String   @unique
  count     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model userSubscription {
  id                     String    @id @default(cuid()) @map("_id")
  userId                 String    @unique
  stripeCustomerId       String?   @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId   String?   @unique @map(name: "stripe_subscription_id")
  stripePriceId          String?   @unique @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @map(name: "stripe_current_period_end")
}

// import { auth } from "@clerk/nextjs";

// import { MAX_FREE_COUNTS } from "@/constants";
// import prismadb from "./prismadb";

// export const increaseApiLimit = async () => {
//     const { userId } = auth();

//     if (!userId) {
//         return;
//     }

//     const userApiLimit = await prismadb.userApiLimit.findUnique({
//         where: {
//             userId,
//         },
//     });

//     if (!userApiLimit) {
//         await prismadb.userApiLimit.create({
//             data: {
//                 userId,
//                 count: 1,
//             },
//         });
//     } else {
//         await prismadb.userApiLimit.update({
//             where: {
//                 userId,
//             },
//             data: {
//                 count: userApiLimit.count + 1,
//             },
//         });
//     }
// };

// export const checkApiLimit = async () => {
//     const { userId } = auth();

//     if (!userId) {
//         return false;
//     }

//     const userApiLimit = await prismadb.userApiLimit.findUnique({
//         where: {
//             userId,
//         },
//     });

//     if (!userApiLimit || userApiLimit.count < MAX_FREE_COUNTS) {
//         return true;
//     } else {
//         return false;
//     }
// };

// export const getApiLimitCount = async () => {
//     const { userId } = auth();

//     if (!userId) {
//         return 0;
//     }

//     const userApiLimit = await prismadb.userApiLimit.findUnique({
//         where: {
//             userId,
//         },
//     });

//     if (!userApiLimit) {
//         return 0;
//     } else {
//         return userApiLimit.count;
//     }
// };
